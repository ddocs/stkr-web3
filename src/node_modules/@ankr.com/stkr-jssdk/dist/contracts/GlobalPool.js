"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalPoolEvents = exports.GlobalPool = void 0;
var GlobalPool_json_1 = __importDefault(require("./abi/GlobalPool.json"));
var BaseContract_1 = require("./BaseContract");
var EventBase_1 = require("../EventBase");
var GlobalPool = /** @class */ (function (_super) {
    __extends(GlobalPool, _super);
    function GlobalPool(web3, network) {
        var _this = _super.call(this, web3, network) || this;
        _this.abi = GlobalPool_json_1.default;
        _this.events = new GlobalPoolEvents(_this.getContract());
        return _this;
    }
    GlobalPool.prototype.getName = function () {
        return 'GlobalPool';
    };
    GlobalPool.prototype.isPaused = function (action, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['isPaused'](action).call()];
            });
        });
    };
    GlobalPool.prototype.owner = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['owner']().call()];
            });
        });
    };
    GlobalPool.prototype.renounceOwnership = function (options) {
        return this.getContract().methods['renounceOwnership']().send(options);
    };
    GlobalPool.prototype.togglePause = function (action, options) {
        return this.getContract().methods['togglePause'](action).send(options);
    };
    GlobalPool.prototype.transferOwnership = function (newOwner, options) {
        return this.getContract().methods['transferOwnership'](newOwner).send(options);
    };
    GlobalPool.prototype.multipleDeposit = function (pubkey, withdrawalCredentials, signature, depositDataRoot, options) {
        return this.getContract().methods['multipleDeposit'](pubkey, withdrawalCredentials, signature, depositDataRoot).send(options);
    };
    GlobalPool.prototype.pushToBeacon = function (pubkey, withdrawalCredentials, signature, depositDataRoot, options) {
        return this.getContract().methods['pushToBeacon'](pubkey, withdrawalCredentials, signature, depositDataRoot).send(options);
    };
    GlobalPool.prototype.stake = function (options) {
        return this.getContract().methods['stake']().send(options);
    };
    GlobalPool.prototype.topUpETH = function (options) {
        return this.getContract().methods['topUpETH']().send(options);
    };
    GlobalPool.prototype.topUpANKR = function (amount, options) {
        return this.getContract().methods['topUpANKR'](amount).send(options);
    };
    GlobalPool.prototype.slash = function (provider, amount, options) {
        return this.getContract().methods['slash'](provider, amount).send(options);
    };
    GlobalPool.prototype.providerExit = function (options) {
        return this.getContract().methods['providerExit']().send(options);
    };
    GlobalPool.prototype.claim = function (options) {
        return this.getContract().methods['claim']().send(options);
    };
    GlobalPool.prototype.claimableRewardOf = function (staker, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['claimableRewardOf'](staker).call()];
            });
        });
    };
    GlobalPool.prototype.claimableAETHRewardOf = function (staker, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['claimableAETHRewardOf'](staker).call()];
            });
        });
    };
    GlobalPool.prototype.claimableAETHFRewardOf = function (staker, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['claimableAETHFRewardOf'](staker).call()];
            });
        });
    };
    GlobalPool.prototype.claimAETH = function (options) {
        return this.getContract().methods['claimAETH']().send(options);
    };
    GlobalPool.prototype.claimFETH = function (options) {
        return this.getContract().methods['claimFETH']().send(options);
    };
    GlobalPool.prototype.unstake = function (options) {
        return this.getContract().methods['unstake']().send(options);
    };
    GlobalPool.prototype.availableEtherBalanceOf = function (provider, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['availableEtherBalanceOf'](provider).call()];
            });
        });
    };
    GlobalPool.prototype.etherBalanceOf = function (provider, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['etherBalanceOf'](provider).call()];
            });
        });
    };
    GlobalPool.prototype.updateEther = function (provider, val, options) {
        return this.getContract().methods['updateEther'](provider, val).send(options);
    };
    GlobalPool.prototype.pendingEtherBalanceOf = function (provider, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['pendingEtherBalanceOf'](provider).call()];
            });
        });
    };
    GlobalPool.prototype.slashingsOf = function (provider, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['slashingsOf'](provider).call()];
            });
        });
    };
    GlobalPool.prototype.poolCount = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['poolCount']().call()];
            });
        });
    };
    GlobalPool.prototype.pendingStakesOf = function (staker, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['pendingStakesOf'](staker).call()];
            });
        });
    };
    GlobalPool.prototype.updateAETHContract = function (tokenContract, options) {
        return this.getContract().methods['updateAETHContract'](tokenContract).send(options);
    };
    GlobalPool.prototype.updateFETHContract = function (tokenContract, options) {
        return this.getContract().methods['updateFETHContract'](tokenContract).send(options);
    };
    GlobalPool.prototype.updateConfigContract = function (configContract, options) {
        return this.getContract().methods['updateConfigContract'](configContract).send(options);
    };
    GlobalPool.prototype.updateStakingContract = function (stakingContract, options) {
        return this.getContract().methods['updateStakingContract'](stakingContract).send(options);
    };
    GlobalPool.prototype.clearEmptyPendingStakers = function (options) {
        return this.getContract().methods['clearEmptyPendingStakers']().send(options);
    };
    GlobalPool.prototype.deleteLastPendingStakerPointer = function (options) {
        return this.getContract().methods['deleteLastPendingStakerPointer']().send(options);
    };
    GlobalPool.prototype.changeOperator = function (operator, options) {
        return this.getContract().methods['changeOperator'](operator).send(options);
    };
    GlobalPool.prototype.depositContractAddress = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContract().methods['depositContractAddress']().call()];
            });
        });
    };
    GlobalPool.prototype.updateFETHRewards = function (Totalrewards, options) {
        return this.getContract().methods['updateFETHRewards'](Totalrewards).send(options);
    };
    return GlobalPool;
}(BaseContract_1.BaseContract));
exports.GlobalPool = GlobalPool;
var GlobalPoolEvents = /** @class */ (function (_super) {
    __extends(GlobalPoolEvents, _super);
    function GlobalPoolEvents() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalPoolEvents.prototype.getPastOwnershipTransferred = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('OwnershipTransferred', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastPoolCompleted = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('PoolCompleted', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastPoolOnGoing = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('PoolOnGoing', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastProviderExited = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('ProviderExited', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastProviderSlashedAnkr = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('ProviderSlashedAnkr', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastProviderSlashedEth = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('ProviderSlashedEth', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastProviderToppedUpAnkr = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('ProviderToppedUpAnkr', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastProviderToppedUpEth = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('ProviderToppedUpEth', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastRewardClaimed = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('RewardClaimed', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastStakeConfirmed = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('StakeConfirmed', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastStakePending = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('StakePending', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastStakeRemoved = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('StakeRemoved', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.getPastaaa = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore
                return [2 /*return*/, this.contract.getPastEvents('aaa', options)];
            });
        });
    };
    GlobalPoolEvents.prototype.OwnershipTransferred = function (options) {
        return this.contract.events.OwnershipTransferred(options);
    };
    GlobalPoolEvents.prototype.PoolCompleted = function (options) {
        return this.contract.events.PoolCompleted(options);
    };
    GlobalPoolEvents.prototype.PoolOnGoing = function (options) {
        return this.contract.events.PoolOnGoing(options);
    };
    GlobalPoolEvents.prototype.ProviderExited = function (options) {
        return this.contract.events.ProviderExited(options);
    };
    GlobalPoolEvents.prototype.ProviderSlashedAnkr = function (options) {
        return this.contract.events.ProviderSlashedAnkr(options);
    };
    GlobalPoolEvents.prototype.ProviderSlashedEth = function (options) {
        return this.contract.events.ProviderSlashedEth(options);
    };
    GlobalPoolEvents.prototype.ProviderToppedUpAnkr = function (options) {
        return this.contract.events.ProviderToppedUpAnkr(options);
    };
    GlobalPoolEvents.prototype.ProviderToppedUpEth = function (options) {
        return this.contract.events.ProviderToppedUpEth(options);
    };
    GlobalPoolEvents.prototype.RewardClaimed = function (options) {
        return this.contract.events.RewardClaimed(options);
    };
    GlobalPoolEvents.prototype.StakeConfirmed = function (options) {
        return this.contract.events.StakeConfirmed(options);
    };
    GlobalPoolEvents.prototype.StakePending = function (options) {
        return this.contract.events.StakePending(options);
    };
    GlobalPoolEvents.prototype.StakeRemoved = function (options) {
        return this.contract.events.StakeRemoved(options);
    };
    return GlobalPoolEvents;
}(EventBase_1.EventBase));
exports.GlobalPoolEvents = GlobalPoolEvents;
//# sourceMappingURL=GlobalPool.js.map