import { Contract, EventOptions, PastEventOptions } from 'web3-eth-contract';
import { ContractEvent, PoolOngoing, StakeRemoved, StakePending, StakeConfirmed, RewardClaimed, ProviderSlashedEth, ProviderSlashedAnkr, ProviderToppedUpEth, ProviderToppedUpAnkr, ProviderExited, SubscribeEvent, ProposalFinished, Vote, Propose } from './types';
export declare class EventBase {
    protected contract: Contract;
    constructor(contract: Contract);
}
export declare class GlobalPoolEvents extends EventBase {
    getPastPoolOnGoing(options: PastEventOptions | {}): Promise<ContractEvent<PoolOngoing>[]>;
    getPastProviderExited(options: PastEventOptions | {}): Promise<ContractEvent<ProviderExited>[]>;
    getPastProviderToppedUpAnkr(options: PastEventOptions | {}): Promise<ContractEvent<ProviderToppedUpAnkr>[]>;
    getPastProviderToppedUpEth(options: PastEventOptions | {}): Promise<ContractEvent<ProviderToppedUpEth>[]>;
    getPastProviderSlashedAnkr(options: PastEventOptions | {}): Promise<ContractEvent<ProviderSlashedAnkr>[]>;
    getPastProviderSlashedEth(options: PastEventOptions | {}): Promise<ContractEvent<ProviderSlashedEth>[]>;
    getPastRewardClaimed(options: PastEventOptions | {}): Promise<ContractEvent<RewardClaimed>[]>;
    getPastStakeConfirmed(options: PastEventOptions | {}): Promise<ContractEvent<StakeConfirmed>[]>;
    getPastStakePending(options: PastEventOptions | {}): Promise<ContractEvent<StakePending>[]>;
    getPastStakeRemoved(options: PastEventOptions | {}): Promise<ContractEvent<StakeRemoved>[]>;
    PoolOnGoing(options: EventOptions | {}): SubscribeEvent<PoolOngoing>;
    ProviderExited(options: EventOptions | {}): SubscribeEvent<ProviderExited>;
    ProviderToppedUpAnkr(options: EventOptions | {}): SubscribeEvent<ProviderToppedUpAnkr>;
    ProviderToppedUpEth(options: EventOptions | {}): SubscribeEvent<ProviderToppedUpEth>;
    ProviderSlashedAnkr(options: EventOptions | {}): SubscribeEvent<ProviderSlashedAnkr>;
    ProviderSlashedEth(options: EventOptions | {}): SubscribeEvent<ProviderSlashedEth>;
    RewardClaimed(options: EventOptions | {}): SubscribeEvent<RewardClaimed>;
    StakeConfirmed(options: EventOptions | {}): SubscribeEvent<StakeConfirmed>;
    StakePending(options: EventOptions | {}): SubscribeEvent<StakePending>;
    StakeRemoved(options: EventOptions | {}): SubscribeEvent<StakeRemoved>;
}
export declare class GovernanceEvents extends EventBase {
    getPastProposalFinished(options: PastEventOptions | {}): Promise<ContractEvent<ProposalFinished>[]>;
    getPastVote(options: PastEventOptions | {}): Promise<ContractEvent<Vote>[]>;
    getPastPropose(options: PastEventOptions | {}): Promise<ContractEvent<Propose>[]>;
    ProposalFinished(options: EventOptions | {}): SubscribeEvent<ProposalFinished>;
    Vote(options: EventOptions | {}): SubscribeEvent<Vote>;
    Propose(options: EventOptions | {}): SubscribeEvent<Propose>;
}
