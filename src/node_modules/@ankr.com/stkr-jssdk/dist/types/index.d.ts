import Web3 from 'web3';
import ContractFactory from './ContractFactory';
import { BlockchainNetworkId, VoteStatus } from './types';
import { SendOptions } from 'web3-eth-contract';
export default class Stkr {
    readonly web3: Web3;
    readonly contracts: ContractFactory;
    constructor(web3: Web3, networkId: BlockchainNetworkId);
    /**
     *  @vote Minimal voting amount is 5M Ankr. Minimal amount must be calculated according to deposited amount
    */
    vote(proposalId: string, vote: VoteStatus, options?: SendOptions): Promise<any>;
    /**
     * @param timeSpan 3-7 days
     */
    propose(timeSpan: number, topic: string, content: string, options?: SendOptions): Promise<any>;
    getProposalInfo(proposalId: string): Promise<import("./types").Proposal>;
    /**
     * Goerli only
     */
    faucet(options?: SendOptions): import("web3-core").PromiEvent<import("web3-eth-contract").Contract>;
    /**
     * Goerli only
     */
    faucet5m(options?: SendOptions): import("web3-core").PromiEvent<import("web3-eth-contract").Contract>;
    setAnkrAllowance(amount: string, options?: SendOptions): import("web3-core").PromiEvent<import("web3-eth-contract").Contract>;
    getAnkrAllowance(owner: string, spender: string): Promise<string>;
    getAnkrGovernanceAllowance(owner: string): Promise<string>;
}
export * from './types';
export * from './events';
