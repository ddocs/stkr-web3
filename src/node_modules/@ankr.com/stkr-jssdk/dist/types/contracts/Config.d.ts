import { BlockchainNetworkId, ContractEvent, SubscribeEvent } from '../types';
import Web3 from 'web3';
import { PromiEvent } from 'web3-core';
import * as BN from 'bn.js';
import { BaseContract } from './BaseContract';
import { EventBase } from '../EventBase';
import { Contract, EventOptions, PastEventOptions, SendOptions } from 'web3-eth-contract';
interface IConfigSet {
    config: string;
    value: BN;
}
interface IGovernorshipTransferred {
    previousGovernor: string;
    newGovernor: string;
}
export declare class Config extends BaseContract {
    readonly events: ConfigEvents;
    abi: any;
    constructor(web3: Web3, network: BlockchainNetworkId);
    getName(): string;
    governor(options?: SendOptions): Promise<string>;
    renounceGovernorship(options?: SendOptions): PromiEvent<Contract>;
    transferGovernorship(newGovernor: string, options?: SendOptions): PromiEvent<Contract>;
    setConfig(config: string, value: BN, options?: SendOptions): PromiEvent<Contract>;
    getConfig(config: string, options?: SendOptions): Promise<BN>;
}
export declare class ConfigEvents extends EventBase {
    getPastConfigSet(options: PastEventOptions | {}): Promise<ContractEvent<IConfigSet>[]>;
    getPastGovernorshipTransferred(options: PastEventOptions | {}): Promise<ContractEvent<IGovernorshipTransferred>[]>;
    ConfigSet(options: EventOptions | {}): SubscribeEvent<IConfigSet>;
    GovernorshipTransferred(options: EventOptions | {}): SubscribeEvent<IGovernorshipTransferred>;
}
export {};
