import { BlockchainNetworkId, ContractEvent, SubscribeEvent } from '../types';
import Web3 from 'web3';
import { PromiEvent } from 'web3-core';
import BN from 'bn.js';
import { BaseContract } from './BaseContract';
import { EventBase } from '../EventBase';
import { Contract, EventOptions, PastEventOptions, SendOptions } from 'web3-eth-contract';
interface IApproval {
    owner: string;
    spender: string;
    value: BN;
}
interface IOwnershipTransferred {
    previousOwner: string;
    newOwner: string;
}
interface ITransfer {
    from: string;
    to: string;
    value: BN;
}
export declare class AETHF extends BaseContract {
    readonly events: AETHFEvents;
    abi: any;
    constructor(web3: Web3, network: BlockchainNetworkId);
    getName(): string;
    owner(options?: SendOptions): Promise<string>;
    renounceOwnership(options?: SendOptions): PromiEvent<Contract>;
    transferOwnership(newOwner: string, options?: SendOptions): PromiEvent<Contract>;
    mint(account: string, shares: BN, sentAmount: BN, options?: SendOptions): PromiEvent<Contract>;
    updateReward(newReward: BN, options?: SendOptions): PromiEvent<Contract>;
    totalSupply(options?: SendOptions): Promise<BN>;
    balanceOf(account: string, options?: SendOptions): Promise<BN>;
    sharesOf(account: string, options?: SendOptions): Promise<BN>;
    sharesOfEth(amount: BN, options?: SendOptions): Promise<BN>;
    transfer(recipient: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    transferFrom(sender: string, recipient: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    name(options?: SendOptions): Promise<string>;
    decimals(options?: SendOptions): Promise<BN>;
    symbol(options?: SendOptions): Promise<string>;
    allowance(owner: string, spender: string, options?: SendOptions): Promise<BN>;
    approve(spender: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    totalShares(options?: SendOptions): Promise<BN>;
}
export declare class AETHFEvents extends EventBase {
    getPastApproval(options: PastEventOptions | {}): Promise<ContractEvent<IApproval>[]>;
    getPastOwnershipTransferred(options: PastEventOptions | {}): Promise<ContractEvent<IOwnershipTransferred>[]>;
    getPastTransfer(options: PastEventOptions | {}): Promise<ContractEvent<ITransfer>[]>;
    Approval(options: EventOptions | {}): SubscribeEvent<IApproval>;
    OwnershipTransferred(options: EventOptions | {}): SubscribeEvent<IOwnershipTransferred>;
    Transfer(options: EventOptions | {}): SubscribeEvent<ITransfer>;
}
export {};
