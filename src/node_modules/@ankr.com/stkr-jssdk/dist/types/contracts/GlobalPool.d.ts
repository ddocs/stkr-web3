import { BlockchainNetworkId, ContractEvent, SubscribeEvent } from '../types';
import Web3 from 'web3';
import { PromiEvent } from 'web3-core';
import * as BN from 'bn.js';
import { BaseContract } from './BaseContract';
import { EventBase } from '../EventBase';
import { Contract, EventOptions, PastEventOptions, SendOptions } from 'web3-eth-contract';
interface IOwnershipTransferred {
    previousOwner: string;
    newOwner: string;
}
interface IPoolCompleted {
    pool: string;
}
interface IPoolOnGoing {
    pool: string;
}
interface IProviderExited {
    provider: string;
}
interface IProviderSlashedAnkr {
    provider: string;
    ankrAmount: BN;
    etherEquivalence: BN;
}
interface IProviderSlashedEth {
    provider: string;
    amount: BN;
}
interface IProviderToppedUpAnkr {
    provider: string;
    amount: BN;
}
interface IProviderToppedUpEth {
    provider: string;
    amount: BN;
}
interface IRewardClaimed {
    staker: string;
    amount: BN;
    isAETH: boolean;
}
interface IStakeConfirmed {
    staker: string;
    amount: BN;
}
interface IStakePending {
    staker: string;
    amount: BN;
}
interface IStakeRemoved {
    staker: string;
    amount: BN;
}
interface Iaaa {
    share: BN;
    claimable: BN;
}
export declare class GlobalPool extends BaseContract {
    readonly events: GlobalPoolEvents;
    abi: any;
    constructor(web3: Web3, network: BlockchainNetworkId);
    getName(): string;
    isPaused(action: string, options?: SendOptions): Promise<boolean>;
    owner(options?: SendOptions): Promise<string>;
    renounceOwnership(options?: SendOptions): PromiEvent<Contract>;
    togglePause(action: string, options?: SendOptions): PromiEvent<Contract>;
    transferOwnership(newOwner: string, options?: SendOptions): PromiEvent<Contract>;
    multipleDeposit(pubkey: Array<string>, withdrawalCredentials: Array<string>, signature: Array<string>, depositDataRoot: Array<string>, options?: SendOptions): PromiEvent<Contract>;
    pushToBeacon(pubkey: string, withdrawalCredentials: string, signature: string, depositDataRoot: string, options?: SendOptions): PromiEvent<Contract>;
    stake(options?: SendOptions): PromiEvent<Contract>;
    topUpETH(options?: SendOptions): PromiEvent<Contract>;
    topUpANKR(amount: BN, options?: SendOptions): PromiEvent<Contract>;
    slash(provider: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    providerExit(options?: SendOptions): PromiEvent<Contract>;
    claim(options?: SendOptions): PromiEvent<Contract>;
    claimableRewardOf(staker: string, options?: SendOptions): Promise<BN>;
    claimableAETHRewardOf(staker: string, options?: SendOptions): Promise<BN>;
    claimableAETHFRewardOf(staker: string, options?: SendOptions): Promise<BN>;
    claimAETH(options?: SendOptions): PromiEvent<Contract>;
    claimFETH(options?: SendOptions): PromiEvent<Contract>;
    unstake(options?: SendOptions): PromiEvent<Contract>;
    availableEtherBalanceOf(provider: string, options?: SendOptions): Promise<undefined>;
    etherBalanceOf(provider: string, options?: SendOptions): Promise<BN>;
    updateEther(provider: string, val: BN, options?: SendOptions): PromiEvent<Contract>;
    pendingEtherBalanceOf(provider: string, options?: SendOptions): Promise<BN>;
    slashingsOf(provider: string, options?: SendOptions): Promise<BN>;
    poolCount(options?: SendOptions): Promise<BN>;
    pendingStakesOf(staker: string, options?: SendOptions): Promise<BN>;
    updateAETHContract(tokenContract: string, options?: SendOptions): PromiEvent<Contract>;
    updateFETHContract(tokenContract: string, options?: SendOptions): PromiEvent<Contract>;
    updateConfigContract(configContract: string, options?: SendOptions): PromiEvent<Contract>;
    updateStakingContract(stakingContract: string, options?: SendOptions): PromiEvent<Contract>;
    clearEmptyPendingStakers(options?: SendOptions): PromiEvent<Contract>;
    deleteLastPendingStakerPointer(options?: SendOptions): PromiEvent<Contract>;
    changeOperator(operator: string, options?: SendOptions): PromiEvent<Contract>;
    depositContractAddress(options?: SendOptions): Promise<string>;
    updateFETHRewards(Totalrewards: BN, options?: SendOptions): PromiEvent<Contract>;
}
export declare class GlobalPoolEvents extends EventBase {
    getPastOwnershipTransferred(options: PastEventOptions | {}): Promise<ContractEvent<IOwnershipTransferred>[]>;
    getPastPoolCompleted(options: PastEventOptions | {}): Promise<ContractEvent<IPoolCompleted>[]>;
    getPastPoolOnGoing(options: PastEventOptions | {}): Promise<ContractEvent<IPoolOnGoing>[]>;
    getPastProviderExited(options: PastEventOptions | {}): Promise<ContractEvent<IProviderExited>[]>;
    getPastProviderSlashedAnkr(options: PastEventOptions | {}): Promise<ContractEvent<IProviderSlashedAnkr>[]>;
    getPastProviderSlashedEth(options: PastEventOptions | {}): Promise<ContractEvent<IProviderSlashedEth>[]>;
    getPastProviderToppedUpAnkr(options: PastEventOptions | {}): Promise<ContractEvent<IProviderToppedUpAnkr>[]>;
    getPastProviderToppedUpEth(options: PastEventOptions | {}): Promise<ContractEvent<IProviderToppedUpEth>[]>;
    getPastRewardClaimed(options: PastEventOptions | {}): Promise<ContractEvent<IRewardClaimed>[]>;
    getPastStakeConfirmed(options: PastEventOptions | {}): Promise<ContractEvent<IStakeConfirmed>[]>;
    getPastStakePending(options: PastEventOptions | {}): Promise<ContractEvent<IStakePending>[]>;
    getPastStakeRemoved(options: PastEventOptions | {}): Promise<ContractEvent<IStakeRemoved>[]>;
    getPastaaa(options: PastEventOptions | {}): Promise<ContractEvent<Iaaa>[]>;
    OwnershipTransferred(options: EventOptions | {}): SubscribeEvent<IOwnershipTransferred>;
    PoolCompleted(options: EventOptions | {}): SubscribeEvent<IPoolCompleted>;
    PoolOnGoing(options: EventOptions | {}): SubscribeEvent<IPoolOnGoing>;
    ProviderExited(options: EventOptions | {}): SubscribeEvent<IProviderExited>;
    ProviderSlashedAnkr(options: EventOptions | {}): SubscribeEvent<IProviderSlashedAnkr>;
    ProviderSlashedEth(options: EventOptions | {}): SubscribeEvent<IProviderSlashedEth>;
    ProviderToppedUpAnkr(options: EventOptions | {}): SubscribeEvent<IProviderToppedUpAnkr>;
    ProviderToppedUpEth(options: EventOptions | {}): SubscribeEvent<IProviderToppedUpEth>;
    RewardClaimed(options: EventOptions | {}): SubscribeEvent<IRewardClaimed>;
    StakeConfirmed(options: EventOptions | {}): SubscribeEvent<IStakeConfirmed>;
    StakePending(options: EventOptions | {}): SubscribeEvent<IStakePending>;
    StakeRemoved(options: EventOptions | {}): SubscribeEvent<IStakeRemoved>;
}
export {};
