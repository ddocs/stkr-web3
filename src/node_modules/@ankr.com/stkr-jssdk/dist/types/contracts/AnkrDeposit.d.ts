import { BlockchainNetworkId, ContractEvent, SubscribeEvent } from '../types';
import Web3 from 'web3';
import { PromiEvent } from 'web3-core';
import * as BN from 'bn.js';
import { BaseContract } from './BaseContract';
import { EventBase } from '../EventBase';
import { Contract, EventOptions, PastEventOptions, SendOptions } from 'web3-eth-contract';
interface ICompensate {
    provider: string;
    ankrAmount: BN;
    etherAmount: BN;
}
interface IDeposit {
    user: string;
    value: BN;
}
interface IFreeze {
    user: string;
    value: BN;
}
interface IOwnershipTransferred {
    previousOwner: string;
    newOwner: string;
}
interface IUnfreeze {
    user: string;
    value: BN;
}
interface IWithdraw {
    user: string;
    value: BN;
}
export declare class AnkrDeposit extends BaseContract {
    readonly events: AnkrDepositEvents;
    abi: any;
    constructor(web3: Web3, network: BlockchainNetworkId);
    getName(): string;
    owner(options?: SendOptions): Promise<string>;
    renounceOwnership(options?: SendOptions): PromiEvent<Contract>;
    transferOwnership(newOwner: string, options?: SendOptions): PromiEvent<Contract>;
    deposit(options?: SendOptions): PromiEvent<Contract>;
    deposit_1(user: string, options?: SendOptions): PromiEvent<Contract>;
    withdraw(amount: BN, options?: SendOptions): PromiEvent<Contract>;
    unfreeze(addr: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    freeze(addr: string, amount: BN, options?: SendOptions): PromiEvent<Contract>;
    availableDepositsOf(user: string, options?: SendOptions): Promise<BN>;
    depositsOf(user: string, options?: SendOptions): Promise<BN>;
    frozenDepositsOf(user: string, options?: SendOptions): Promise<BN>;
    updateGovernance(governance: string, options?: SendOptions): PromiEvent<Contract>;
    allowAddressForFunction(addr: string, topic: string, options?: SendOptions): PromiEvent<Contract>;
}
export declare class AnkrDepositEvents extends EventBase {
    getPastCompensate(options: PastEventOptions | {}): Promise<ContractEvent<ICompensate>[]>;
    getPastDeposit(options: PastEventOptions | {}): Promise<ContractEvent<IDeposit>[]>;
    getPastFreeze(options: PastEventOptions | {}): Promise<ContractEvent<IFreeze>[]>;
    getPastOwnershipTransferred(options: PastEventOptions | {}): Promise<ContractEvent<IOwnershipTransferred>[]>;
    getPastUnfreeze(options: PastEventOptions | {}): Promise<ContractEvent<IUnfreeze>[]>;
    getPastWithdraw(options: PastEventOptions | {}): Promise<ContractEvent<IWithdraw>[]>;
    Compensate(options: EventOptions | {}): SubscribeEvent<ICompensate>;
    Deposit(options: EventOptions | {}): SubscribeEvent<IDeposit>;
    Freeze(options: EventOptions | {}): SubscribeEvent<IFreeze>;
    OwnershipTransferred(options: EventOptions | {}): SubscribeEvent<IOwnershipTransferred>;
    Unfreeze(options: EventOptions | {}): SubscribeEvent<IUnfreeze>;
    Withdraw(options: EventOptions | {}): SubscribeEvent<IWithdraw>;
}
export {};
