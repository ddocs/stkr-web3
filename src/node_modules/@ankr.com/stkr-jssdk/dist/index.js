"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ContractFactory_1 = __importDefault(require("./ContractFactory"));
var Stkr = /** @class */ (function () {
    function Stkr(web3, networkId) {
        this.web3 = web3;
        this.contracts = new ContractFactory_1.default(web3, networkId);
        // TODO: Api implementation
    }
    /**
     *  @vote Minimal voting amount is 5M Ankr. Minimal amount must be calculated according to deposited amount
    */
    Stkr.prototype.vote = function (proposalId, vote, options) {
        return this.contracts.governance.vote(proposalId, vote, options);
    };
    /**
     * @param timeSpan 1-7 days
     */
    Stkr.prototype.propose = function (timeSpan, topic, content, options) {
        return this.contracts.governance.propose(timeSpan, topic, content, options);
    };
    Stkr.prototype.getProposalInfo = function (proposalId) {
        return this.contracts.governance.proposal(proposalId);
    };
    /**
     * Goerli only
     */
    Stkr.prototype.faucet = function (options) {
        return this.contracts.ankr.faucet(options);
    };
    /**
     * Goerli only
     */
    Stkr.prototype.faucet5m = function (options) {
        return this.contracts.ankr.faucet5m(options);
    };
    Stkr.prototype.setAnkrAllowance = function (amount, options) {
        return this.contracts.ankr.approve(this.contracts.ankr.getAddresses()['AnkrDeposit'], amount, options);
    };
    Stkr.prototype.getAnkrAllowance = function (owner, spender) {
        return this.contracts.ankr.allowance(owner, spender);
    };
    return Stkr;
}());
exports.default = Stkr;
__exportStar(require("./types"), exports);
__exportStar(require("./events"), exports);
//# sourceMappingURL=index.js.map